diff --git a/Makefile.in b/Makefile.in
index 1ed44b3..b322f5e 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -17,16 +17,12 @@ NGHTTP2_URL := https://github.com/nghttp2/nghttp2/releases/download/v1.63.0/nght
 CURL_VERSION := curl-8_7_1
 
 # https://github.com/google/brotli/commit/641bec0e30bea648b3da1cd90fc6b44deb429f71
-brotli_install_dir := $(abspath brotli-$(BROTLI_VERSION)/out/installed)
-brotli_static_libs := $(brotli_install_dir)/lib/libbrotlicommon.a $(brotli_install_dir)/lib/libbrotlidec.a
 boringssl_dir := $(abspath boringssl-$(BORING_SSL_COMMIT))
 boringssl_install_dir := $(boringssl_dir)/build
 boringssl_static_libs := $(boringssl_dir)/lib/libssl.a $(boringssl_dir)/lib/libcrypto.a
-nghttp2_install_dir := $(abspath $(NGHTTP2_VERSION)/installed)
-nghttp2_static_libs := $(nghttp2_install_dir)/lib/libnghttp2.a
 
 # Dependencies needed to compile the Chrome version
-chrome_libs := $(brotli_static_libs) $(boringssl_static_libs) $(nghttp2_static_libs)
+chrome_libs :=
 
 # The following variables will be set by the configure script.
 prefix = @prefix@
@@ -108,62 +104,7 @@ chrome-clean: ## Clean build artifacts of the Chrome version. Use after re-runni
 	rm -f .chrome
 .PHONY: chrome-clean
 
-clean: ## Remove all build artifacts, including dependencies
-	rm -Rf brotli-$(BROTLI_VERSION).tar.gz brotli-$(BROTLI_VERSION)
-	rm -Rf boringssl-$(BORING_SSL_COMMIT).zip boringssl-$(BORING_SSL_COMMIT)
-	rm -Rf $(NGHTTP2_VERSION).tar.bz2 $(NGHTTP2_VERSION)
-	rm -Rf $(CURL_VERSION).tar.gz $(CURL_VERSION)
-
-brotli-$(BROTLI_VERSION).tar.gz:
-	curl -L "https://github.com/google/brotli/archive/refs/tags/v${BROTLI_VERSION}.tar.gz" \
-		-o "brotli-${BROTLI_VERSION}.tar.gz"
-
-$(brotli_static_libs): brotli-$(BROTLI_VERSION).tar.gz
-	tar xf brotli-$(BROTLI_VERSION).tar.gz
-	cd brotli-$(BROTLI_VERSION)
-	mkdir -p out
-	cd out
-
-	# Convert autoconf style os name to CMake style os name.
-	case $(host_os) in           \
-	  linux*)                    \
-	    system_name=Linux        \
-	    ;;                       \
-	  darwin*)                   \
-	    system_name=Darwin       \
-	    ;;                       \
-	  *)                         \
-	    system_name=$(host_os)   \
-	    ;;                       \
-	esac
-
-	@cmake@ -DCMAKE_BUILD_TYPE=Release \
-	        -DCMAKE_INSTALL_PREFIX=./installed \
-	        -DCMAKE_INSTALL_LIBDIR=lib \
-	        -DCMAKE_CXX_COMPILER=$(CXX) \
-	        -DCMAKE_C_COMPILER=$(CC) \
-			-DCMAKE_C_FLAGS="$(CFLAGS)" \
-	        -DCMAKE_SYSTEM_NAME=$$system_name \
-	        -DCMAKE_SYSTEM_PROCESSOR=$(host_cpu) \
-	        -DBUILD_SHARED_LIBS=OFF \
-	        ..
-
-	@cmake@ --build . --config Release --target install --parallel $(SUBJOBS)
-
-
-boringssl-$(BORING_SSL_COMMIT).zip:
-	curl -L https://github.com/google/boringssl/archive/$(BORING_SSL_COMMIT).zip \
-		-o boringssl-$(BORING_SSL_COMMIT).zip
-
-# Patch boringssl and use a dummy '.patched' file to mark it patched
-boringssl-$(BORING_SSL_COMMIT)/.patched: $(srcdir)/chrome/patches/boringssl.patch
-	unzip -q -o boringssl-$(BORING_SSL_COMMIT).zip
-	# mv boringssl boringssl-$(BORING_SSL_COMMIT)
-	cd boringssl-$(BORING_SSL_COMMIT)/
-	for p in $^; do patch -p1 < $$p; done
-	touch .patched
-
-$(boringssl_static_libs): boringssl-$(BORING_SSL_COMMIT).zip boringssl-$(BORING_SSL_COMMIT)/.patched
+$(boringssl_static_libs): boringssl-$(BORING_SSL_COMMIT)/.patched
 	mkdir -p $(boringssl_install_dir)
 	cd $(boringssl_install_dir)
 
@@ -201,47 +142,8 @@ $(boringssl_static_libs): boringssl-$(BORING_SSL_COMMIT).zip boringssl-$(BORING_
 	cp ssl/libssl.a $(boringssl_dir)/lib
 	cp crypto/libcrypto.a $(boringssl_dir)/lib
 
-
-$(NGHTTP2_VERSION).tar.bz2:
-	curl -L $(NGHTTP2_URL) -o $(NGHTTP2_VERSION).tar.bz2
-
-$(nghttp2_static_libs): $(NGHTTP2_VERSION).tar.bz2
-	tar -xf $(NGHTTP2_VERSION).tar.bz2
-	cd $(NGHTTP2_VERSION)
-
-	# Set up the configure flags to nghttp2.
-	# If the user provided the --host flag to our configure script
-	# (for cross compilation), then pass it on to nghttp2.
-	{ \
-	  config_flags="--prefix=$(nghttp2_install_dir)"; \
-	  config_flags="$$config_flags --with-pic --enable-lib-only"; \
-	  config_flags="$$config_flags --disable-shared --disable-python-bindings"; \
-	  if test -n "$(host_alias)"; then \
-	    config_flags="$$config_flags --host=$(host_alias)"; \
-	  fi; \
-	}
-
-	./configure $$config_flags
-	$(MAKE) MAKEFLAGS=-j$(SUBJOBS)
-	$(MAKE) install MAKEFLAGS=
-
-$(CURL_VERSION).tar.gz:
-	curl -L "https://github.com/curl/curl/archive/$(CURL_VERSION).tar.gz" \
-		-o "$(CURL_VERSION).tar.gz"
-
-# Apply the "Chorme version" patches and mark using a dummy file
-$(CURL_VERSION)/.patched-chrome: $(srcdir)/chrome/patches/curl-*.patch
-	rm -Rf $(CURL_VERSION)
-	tar -xf $(CURL_VERSION).tar.gz
-	mv curl-$(CURL_VERSION) $(CURL_VERSION)  # fix directory name
-	cd $(CURL_VERSION)
-	for p in $^; do patch -p1 < $$p; done
-	# Re-generate the configure script
-	autoreconf -fi
-	touch .patched-chrome
-
 # This is a small hack that flags that curl was patched and configured in the "chrome" version
-$(CURL_VERSION)/.chrome: $(chrome_libs)	$(CURL_VERSION).tar.gz $(CURL_VERSION)/.patched-chrome
+$(CURL_VERSION)/.chrome: $(chrome_libs) $(CURL_VERSION)/.patched-chrome
 	cd $(CURL_VERSION)
 
 	# Set up the configure flags to curl.
