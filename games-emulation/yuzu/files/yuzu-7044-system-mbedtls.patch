From 0e766de9b040db53ce8ccb671e5c577eb70e38af Mon Sep 17 00:00:00 2001
From: Andrea Pappacoda <andrea@pappacoda.it>
Date: Sat, 18 Sep 2021 15:39:20 +0200
Subject: [PATCH] build(cmake): use system MbedTLS when available

Since MbedTLS pre-3.0.0 doesn't ship neither a pkg-config file nor a
CMake package config file it is required to use a custom
FindMbedTLS.cmake file.

Since yuzu requires CMAC support it is also needed to check for the
`mbedtls_cipher_cmac` symbol.

To avoid API incompatibilities, find_package() only accepts version
2.16.x LTS.

I also changed src/core/CMakeLists.txt to only link against mbedcrypto,
as yuzu doesn't use the full MbedTLS library
---
 externals/CMakeLists.txt                 | 10 +++--
 externals/find-modules/FindMbedTLS.cmake | 48 ++++++++++++++++++++++++
 src/core/CMakeLists.txt                  |  2 +-
 3 files changed, 56 insertions(+), 4 deletions(-)
 create mode 100644 externals/find-modules/FindMbedTLS.cmake

diff --git a/externals/CMakeLists.txt b/externals/CMakeLists.txt
index a76a3d8006e..c8b2c28090f 100644
--- a/externals/CMakeLists.txt
+++ b/externals/CMakeLists.txt
@@ -36,9 +36,13 @@ add_subdirectory(glad)
 # inih
 add_subdirectory(inih)

-# mbedtls
-add_subdirectory(mbedtls EXCLUDE_FROM_ALL)
-target_include_directories(mbedtls PUBLIC ./mbedtls/include)
+# MbedTLS
+find_package(MbedTLS 2.16)
+if(NOT MbedTLS_FOUND)
+    message(STATUS "MbedTLS not found, falling back to externals")
+    add_subdirectory(mbedtls EXCLUDE_FROM_ALL)
+    target_include_directories(mbedcrypto PUBLIC ./mbedtls/include)
+endif()

 # MicroProfile
 add_library(microprofile INTERFACE)
diff --git a/externals/find-modules/FindMbedTLS.cmake b/externals/find-modules/FindMbedTLS.cmake
new file mode 100644
index 00000000000..d7f2544bb65
--- /dev/null
+++ b/externals/find-modules/FindMbedTLS.cmake
@@ -0,0 +1,48 @@
+# SPDX-FileCopyrightText: 2021 Andrea Pappacoda <andrea@pappacoda.it>
+#
+# SPDX-License-Identifier: GPL-2.0-or-later
+
+# MbedTLS 3.0.0 will ship with a CMake package config file,
+# see ARMmbed/mbedtls@d259e347e6e3a630acfc1a811709ca05e5d3b92e,
+# so when yuzu will switch to that version this won't be required anymore.
+#
+# yuzu only uses mbedcrypto, searching for mbedtls and mbedx509 is not
+# needed.
+
+find_path(MbedTLS_INCLUDE_DIR mbedtls/cipher.h)
+
+find_library(MbedTLS_LIBRARY mbedcrypto)
+
+if (MbedTLS_INCLUDE_DIR AND MbedTLS_LIBRARY)
+    set(MbedTLS_FOUND True)
+    set(MbedTLS_LIBRARIES ${MbedTLS_LIBRARY})
+    set(MbedTLS_INCLUDE_DIRS ${MbedTLS_INCLUDE_DIR})
+
+    # Check for CMAC support
+    include(CheckSymbolExists)
+    set(CMAKE_REQUIRED_LIBRARIES ${MbedTLS_LIBRARY})
+    check_symbol_exists(mbedtls_cipher_cmac ${MbedTLS_INCLUDE_DIR}/mbedtls/cmac.h mbedcrypto_HAS_CMAC)
+    unset(CMAKE_REQUIRED_LIBRARIES)
+
+    # Check if version 2.x is available
+    file(READ "${MbedTLS_INCLUDE_DIR}/mbedtls/version.h" MbedTLS_VERSION_FILE)
+    string(REGEX MATCH "#define[ ]+MBEDTLS_VERSION_STRING[ ]+\"([0-9.]+)\"" _ ${MbedTLS_VERSION_FILE})
+    set(MbedTLS_VERSION "${CMAKE_MATCH_1}")
+
+    if (NOT TARGET MbedTLS::mbedcrypto)
+        add_library(MbedTLS::mbedcrypto UNKNOWN IMPORTED GLOBAL)
+        set_target_properties(MbedTLS::mbedcrypto PROPERTIES
+            IMPORTED_LOCATION "${MbedTLS_LIBRARY}"
+            INTERFACE_INCLUDE_DIRECTORIES "${MbedTLS_INCLUDE_DIR}"
+        )
+        add_library(mbedcrypto ALIAS MbedTLS::mbedcrypto)
+        endif()
+endif()
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(MbedTLS
+    REQUIRED_VARS
+        MbedTLS_FOUND
+        mbedcrypto_HAS_CMAC
+    VERSION_VAR MbedTLS_VERSION
+)
diff --git a/src/core/CMakeLists.txt b/src/core/CMakeLists.txt
index 50688565907..e5bbb7b0045 100644
--- a/src/core/CMakeLists.txt
+++ b/src/core/CMakeLists.txt
@@ -701,7 +701,7 @@ endif()
 create_target_directory_groups(core)

 target_link_libraries(core PUBLIC common PRIVATE audio_core video_core)
-target_link_libraries(core PUBLIC Boost::boost PRIVATE fmt::fmt nlohmann_json::nlohmann_json mbedtls Opus::Opus)
+target_link_libraries(core PUBLIC Boost::boost PRIVATE fmt::fmt nlohmann_json::nlohmann_json mbedcrypto Opus::Opus)

 if (ENABLE_WEB_SERVICE)
     target_compile_definitions(core PRIVATE -DENABLE_WEB_SERVICE)
